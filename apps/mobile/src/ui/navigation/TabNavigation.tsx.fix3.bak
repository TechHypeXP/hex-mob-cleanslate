import React from 'react';
import { View, Text, StyleSheet, Pressable } from 'react-native';
import Animated, {
  useSharedValue,
  useAnimatedStyle,
  withSpring,
  withTiming,
} from 'react-native-reanimated';
import { Home, Image, BarChart3, Settings } from 'lucide-react-native';

interface TabNavigationProps {
  activeTab: string;
  onTabChange: (tab: string) => void;
}

interface TabItem {
  id: string;
  label: string;
  icon: React.ElementType;
}

const tabs: TabItem[] = [
  { id: 'clean', label: 'Clean', icon: Home },
  { id: 'gallery', label: 'Gallery', icon: Image },
  { id: 'stats', label: 'Stats', icon: BarChart3 },
  { id: 'settings', label: 'Settings', icon: Settings },
];

const TabNavigation: React.FC<TabNavigationProps> = ({ activeTab, onTabChange }) => {
  return (
    <View style={styles.container}>
      <View style={styles.tabBar}>
        {tabs.map((tab) => (
          <TabButton
            key={tab.id}
            tab={tab}
            isActive={activeTab === tab.id}
            onPress={() => onTabChange(tab.id)}
          />
        ))}
      </View>
    </View>
  );
};

interface TabButtonProps {
  tab: TabItem;
  isActive: boolean;
  onPress: () => void;
}

const TabButton: React.FC<TabButtonProps> = ({ tab, isActive, onPress }) => {
  const scale = useSharedValue(1);
  const opacity = useSharedValue(0);

  React.useEffect(() => {
    if (isActive) {
      scale.value = withSpring(1.1, {
        damping: 15,
        stiffness: 200,
      });
      opacity.value = withTiming(1, { duration: 200 });
    } else {
      scale.value = withSpring(1, {
        damping: 15,
        stiffness: 200,
      });
      opacity.value = withTiming(0, { duration: 200 });
    }
  }, [isActive]);

  const animatedStyle = useAnimatedStyle(() => ({
    transform: [{ scale: scale.value }],
  }));

  const indicatorStyle = useAnimatedStyle(() => ({
    opacity: opacity.value,
  }));

  const Icon = tab.icon;

  return (
    <Pressable
      style={styles.tabButton}
      onPress={onPress}
      android_ripple={{ color: 'rgba(255, 255, 255, 0.1)', borderless: false }}
    >
      <Animated.View style={[styles.tabContent, animatedStyle]}>
        <Icon
          size={24}
          color={isActive ? '#007AFF' : '#8E8E93'}
          strokeWidth={isActive ? 2.5 : 2}
        />
        <Text style={[styles.tabLabel, { color: isActive ? '#007AFF' : '#8E8E93' }]}>
          {tab.label}
        </Text>
        <Animated.View style={[styles.activeIndicator, indicatorStyle]} />
      </Animated.View>
    </Pressable>
  );
};

const styles = StyleSheet.create({
  container: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: '#1C1C1E',
    borderTopWidth: 1,
    borderTopColor: '#2C2C2E',
  },
  tabBar: {
    flexDirection: 'row',
    height: 83,
    paddingBottom: 34,
    backgroundColor: '#1C1C1E',
  },
  tabButton: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  tabContent: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 8,
  },
  tabLabel: {
    fontSize: 11,
    fontWeight: '600',
    marginTop: 4,
    fontFamily: 'SF Pro Display',
  },
  activeIndicator: {
    position: 'absolute',
    top: -8,
    width: 48,
    height: 3,
    backgroundColor: '#007AFF',
    borderRadius: 2,
  },
});

export default TabNavigation;